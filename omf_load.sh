#!/bin/bash
#arguments are: nodeList imageName
set -x #-e
LOG="Frisbee.log"
#################Function that runs Frisbee clients in parallel######################

function client_excute {
	ERROR="tasks/${IDS[$2]}-load.error"
	PROGRESS="tasks/${IDS[$2]}-load.progress"
	#We have to output errors on this log. error format: Error msg
	CLIENT_LOG="${NODES[$2]}-$IMAGENAME-load.log"
	echo "[`date`] INFO: Starting Frisbee client on ${NODES[$2]}" >> $LOG	
#Important Note: The next line starts Frisbee client. It generates the progress of the loading process and also errors generated by Frisbee client (if any). So, both load progress and Frisbee internal errors are both added to the PROGRESS LOG in this case.
	unbuffer sshpass -p $COREPASS ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $COREUSER@$1 \
		"route add -net $MMASK eth0; frisbee -p $PORT -i $1 -m $MADDR /dev/sda1;" | tee -a $PROGRESS
        # unbuffer -p cut -d' ' -f 2 |
	#Check if any errors happen because of Frisbee. Frisbee works if the progress file is complete and else it fails.
	if ! grep -q "50%" "$PROGRESS"; then
  	 	echo "ERROR: Frisbee had some error" >> $ERROR
		exit -1
 	fi
	RETURN=$?
	if [ "$RETURN" -ne 0 ] ; then
		echo "Error Can't ssh on ${NODES[$2]} to run Frisbee client" >> $CLIENT_LOG
		echo "ERROR: Cannot access ${NODES[$2]} to run Frisbee client" >> $ERROR
		echo "ERROR: May be erorr from Frisbee. Kindly check the log file" >> $ERROR
		exit -1
  	fi
	sudo rm -rf ${PXELINKS[$2]}
	RETURN=$?
	if [ "$RETURN" -ne 0 ] ; then
		echo "ERROR: Cannot force ${NODES[$2]} to restart to Ubuntu" >> $ERROR
		exit -1
  	fi
	echo "[`date`] INFO: Restarting ${NODES[$2]}" >> $LOG
	sshpass -p $COREPASS ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $COREUSER@$1 "reboot"
	RETURN=$?
	if [ "$RETURN" -ne 0 ] ; then
		echo "Error Can't ssh on ${NODES[$2]} to reboot on tiny core" >> $CLIENT_LOG
		#echo "ERROR: Cannot access ${NODES[$2]} to restart to Ubuntu" >> $ERROR
		#exit -1
  	fi
	echo "[`date`] INFO: Load process is finished. Congratulations! \n please wait for 1 minute" >> $LOG
	#echo "Load DONE for ${NODES[$2]}!" >> $PROGRESS
	echo "" >> $PROGRESS
	echo -n "t 100%" >> $PROGRESS
}

function restart_ubuntu {
	CLIENT_LOG="${NODES[$2]}-$IMAGENAME-load.log"
#First time to use the file, overwrite
	echo "" > $CLIENT_LOG
	sudo ln -sv $PXECONF ${PXELINKS[$2]}
	sshpass -p crc123 ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no node5@$1 \
	        "echo crc123 | sudo -S shutdown -r now"
}

################################################################

#Initial state of the target machine when using this script: ON, tiny core
#########################################
#            PREPARATION                #
#########################################
echo "[`date`] INFO: Starting omf_laod.sh" >> $LOG
DNSMASQ_PATH=/etc/dnsmasq.d/testbed.conf
PXEDIR=/tftpboot/pxelinux.cfg
PXECONF=$PXEDIR/tinycore
STORAGEDIRECTORY=/home/crc-am/Desktop/Storage
#------------------------------Determine the MULTICAST address-----------------------------------------
FLOOR=1
CEIL=254
NUM1=0   #initialize
while [[ "$NUM1" -le $FLOOR ]] || [[ "$NUM1" -ge $CEIL ]]
do
  NUM1=$RANDOM
done
NUM2=0   #initialize
while [[ "$NUM2" -le $FLOOR ]] || [[ "$NUM2" -ge $CEIL ]]
do
  NUM2=$RANDOM
done
NUM3=0   #initialize
while [[ "$NUM3" -le $FLOOR ]] || [[ "$NUM3" -ge $CEIL ]]
do
  NUM3=$RANDOM
done
#-------------------------------------------------------------------------------------------------
MADDR="235.$NUM1.$NUM2.$NUM3"
MMASK="235.0.0.0/8"

COREUSER=root
COREPASS=masterpassword

if [[ $1 == "" ]]  || [[ $2 == "" ]] || [[ $3 == "" ]] ; then
	echo "Usage: ./omf_load.sh node_name image_name task_id"
	exit -1
fi


for i in "${IDS[@]}"; do
	echo -n "0%" >> "tasks/$i-load.progress"
done

NODES_STR=$1        # comma separated string of nodes on which we need to load images
IFS=',' read -ra NODES <<< "$NODES_STR"

IDS_STR=$3 #Array of IDs
IFS=',' read -ra IDS <<< "$IDS_STR"

#Nodes is an array of strings that represent the target nodes names
IMAGENAME=$2   # constructed from command line parameters

#if [ ! -f $STORAGEDIRECTORY/$IMAGENAME ]; then
if [ ! -f $IMAGENAME ]; then
	for i in "${IDS[@]}"; do
    		echo "ERROR: Image not found!" >> "tasks/$i-load.error"
	done
    exit -1
fi

INDEX=0
for i in "${NODES[@]}"; do
	RECORDS[$INDEX]=`cat $DNSMASQ_PATH | grep ,"$i",` # omf.crc.
	if [ -z "${RECORDS[$INDEX]}" ]; then
	for i in "${IDS[@]}"; do
    		echo "ERROR: Cannot find node with the name ${NODES[$INDEX]}" >> "tasks/$i-load.error"
	done
	  exit -1
	fi
	IPADDRS[$INDEX]=`echo ${RECORDS[$INDEX]} | cut -d , -f 4`
	MACADDRS[$INDEX]=`echo ${RECORDS[$INDEX]} | cut -d , -f 2 | tr '[:upper:]' '[:lower:]'`
	PXELINKS[$INDEX]=$PXEDIR/01-`echo ${MACADDRS[$INDEX]} | sed 's/:/-/g'`
	INDEX=$INDEX+1
done

echo "[`date`] INFO: OMF Load Preparation phase finished" >> $LOG
echo "[`date`] INFO: Image $IMAGENAME will be loaded on $NODES_STR" >> $LOG
#Check that this node is ON and reachable
#If one node is not working, the whole script stops
#==============================================
INDEX=0
for i in "${IPADDRS[@]}"; do
	RES=`ping -c 1 -t 10 $i ; echo $?`
	ii=$((${#RES}-1))
	LAST=${RES:$ii:1}
	if [ $LAST == "0" ];
	then
	  echo "${NODES[$INDEX]} is running and reachable"
	  echo "[`date`] INFO: ${NODES[$INDEX]} is running and reachable" >> $LOG
	else
	  echo "${NODES[$INDEX]} is unreachable. Check that it is ON and connected properly to the network"
	  echo "[`date`] INFO: ${NODES[$INDEX]} is unreachable. Check that it is ON and connected properly to the network" >> $LOG
	for i in "${IDS[@]}"; do
    		echo "ERROR: ${NODES[$INDEX]} is unreachable on the network" >> "tasks/$i-load.error"
	done
	  exit -1
	fi
	INDEX=$INDEX+1
done
#==============================================
#------------------------------Determine the port number-----------------------------------------
FLOOR=1024
CEIL=49151
PORT=0   #initialize
while [[ "$PORT" -le $FLOOR ]] || [[ "$PORT" -ge $CEIL ]]
do
  PORT=$RANDOM
  if [ -z "`netstat -an |grep $PORT |grep LISTEN`" ] ; then
	continue
  fi
done
echo "The port $PORT is closed and can be used "
	
#-------------------------------------------------------------------------------------------
echo "[`date`] INFO: Frisbee will listen on port $PORT" >> $LOG
echo "frisbeed is starting..."
echo "[`date`] INFO: Starting Frisbee server" >> $LOG
#echo "3%" >> $PROGRESS
#########################################################
INDEX=0							#
#echo "If on Ubuntu, restarting on tinyCore" >> $LOG    #
for i in "${IPADDRS[@]}"; do				#
	restart_ubuntu $i $INDEX &			#
	INDEX=$INDEX+1					#
done							#
#########################################################
sleep 60
#echo CRC123 | sudo -S ./frisbeed -W 5000000000 -i 10.0.0.200 -p $PORT -m $MADDR $STORAGEDIRECTORY/$IMAGENAME &
#./frisbeed -W 5000000000 -i 10.0.0.200 -p $PORT -m $MADDR $STORAGEDIRECTORY/$IMAGENAME &
./frisbeed -W 5000000000 -i 10.0.0.200 -p $PORT -m $MADDR $IMAGENAME &
FRISBEED_PID=$!
# We have to open aonther thread here (so, we put &)
INDEX=0
echo "[`date`] INFO: Frisbee Server started" >> $LOG
for i in "${IPADDRS[@]}"; do
	echo "IP Address of the node on which I will install the image is $i" >> $LOG
	client_excute $i $INDEX &
	PIDS[$INDEX]=$!
	INDEX=$INDEX+1
done
for i in "${PIDS[@]}"; do
	echo "[`date`] Waiting for pid $i" >> $LOG
	wait $i && echo "$i exited normally" || echo "Error $i exited abnormally with status $?" >> $CLIENT_LOG
	echo "[`date`] Returned from waiting pid $i" >> $LOG
done
echo "Killing Frisbee Server" >> $LOG
kill $FRISBEED_PID
exit $?
